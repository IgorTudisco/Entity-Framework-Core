@page "/EditarArtista/{NomeArtista}"
@inject ArtistasAPI artistasAPI
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição do Artista</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
        Variant="Variant.Outlined"
        @bind-Value="Nome"
        Required="true"
        RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
        Variant="Variant.Outlined"
        @bind-Value="Biografia"
        Lines="4"
        Required="true"
        RequiredError="Campo obrigatório." />

        <div class="d-flex justify-space-between mt-4">

            <MudRating
            @bind-SelectedValue="Classificacao"
            @onclick="AvaliarArtista"
            />

            <div>
                <MudButton Variant="Variant.Filled"
                OnClick="Voltar"
                Color="Color.Info"
                Class="w-100 ms-lg-3">
                    Voltar
                </MudButton>

                <MudButton Variant="Variant.Filled"
                OnClick="Edit"
                Color="Color.Primary"
                Class="w-100 ms-lg-3">
                    Salvar  
                </MudButton>

                <MudButton Variant="Variant.Filled"
                OnClick="Deletar"
                Color="Color.Warning"
                Class="w-100 ms-lg-3">
                    Deletar
                </MudButton>

            </div>
        </div>

    </MudForm>
</MudPaper>

@code {
    public string? Nome;
    public string? Biografia;
    public int Classificacao;
    [Parameter]
    public string? NomeArtista { get; set; }
    public ArtistaResponse? Artista { get; set; }
    public ArtistaRequestEdit? artistaRequestEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artista = await artistasAPI.GetArtistaPorNomeAsync(NomeArtista!);
        Nome = Artista!.Nome;
        Biografia = Artista!.Bio;

    }

    private async Task Edit()
    {
        artistaRequestEdit = new ArtistaRequestEdit(Artista!.Id, Nome!, Biografia!, Artista!.FotoPerfil);
        await artistasAPI.EditArtistaAsync(artistaRequestEdit!);
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task Deletar()
    {
        await artistasAPI.DeleteArtistaAsync(Artista!.Id);
        navigationManager.NavigateTo("/Artistas");
    }

    private void Voltar()
    {
        navigationManager.NavigateTo("/Artistas");
    }

    private async Task AvaliarArtista()
    {
        await artistasAPI.AvaliaArtistaAsync(Artista!.Id, Classificacao);
    }
}