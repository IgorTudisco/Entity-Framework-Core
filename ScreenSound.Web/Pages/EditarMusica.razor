@page "/EditarMusica/{NomeMusica}"


@inject ArtistasAPI artistasAPI
@inject GeneroAPI generoAPI
@inject MusicasAPI musicaAPI
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Música</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção"
        @bind-Value="nome"
        Variant="Variant.Outlined"
        Required="true"
        RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="ArtistaResponse" Label="Artistas" Variant="Variant.Outlined" ValueChanged="ArtistaSelecionado" AnchorOrigin="Origin.BottomCenter">
            @if (artistas is not null)
            {
                @foreach (var artista in artistas)
                {
                    <MudSelectItem Value="artista">@artista.Nome</MudSelectItem>
                }
            }
        </MudSelect>

        <MudNumericField Class="mt-4" Placeholder="Ano de lançamento"
        @bind-Value="anoLancamento"
        Variant="Variant.Outlined"
        Lines="1"
        Required="true"
        RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="GeneroResponse" Label="Gêneros" Variant="Variant.Outlined"ValueChanged="GeneroSelecionado" AnchorOrigin="Origin.BottomCenter">
            @if (generos is not null)
            {
                @foreach (var genero in generos)
                {
                    <MudSelectItem Value="genero">@genero.Nome</MudSelectItem>
                }
            }
            @if (GenerosSelecionados is not null)
            {
                foreach (var genero in GenerosSelecionados)
                {
                    <MudAlert Severity="Severity.Info">@(genero.Nome) adicionado como gênero da música.</MudAlert>
                }
            }
        </MudSelect>

        <div class="d-flex justify-space-between mt-4">

            <MudButton Variant="Variant.Filled"
            OnClick="Voltar"
            Color="Color.Secondary"
            Class="w-100">
                Voltar
            </MudButton>

            <div>
                <MudButton Variant="Variant.Filled"
                OnClick="Edit"
                Color="Color.Secondary"
                Class="w-100">
                    Editar
                </MudButton>

                <MudButton Variant="Variant.Filled"
                OnClick="Deletar"
                Color="Color.Secondary"
                Class="w-100 ms-lg-3">
                    Deletar
                </MudButton>
            </div>

        </div>

    </MudForm>

</MudPaper>

@code {
    private int? anoLancamento;
    private string? nome;
    private ArtistaResponse? artista;
    private GeneroResponse? genero;

    private ICollection<ArtistaResponse>? artistas;
    private ICollection<GeneroResponse>? generos;

    private List<GeneroResponse>? GenerosSelecionados { get; set; } = new();
    private ArtistaResponse? ArtistaDaMusica { get; set; }

    public MusicaResponse? Musica { get; set; }
    public MusicaRequestEdit? MusicaEdit { get; set; }

    [Parameter]
    public string? NomeMusica { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Musica = await musicaAPI.GetMusicaPorNomeAsync(NomeMusica!);
        anoLancamento = Musica!.anoLancamento;
        nome = Musica!.Nome;
        ArtistaDaMusica = new ArtistaResponse(Musica.ArtistaId, Musica.NomeArtista, "", "");

        artistas = await artistasAPI.GetArtistasAsync();
        generos = await generoAPI.GetGenerosAsync();
    }

    private void ArtistaSelecionado(ArtistaResponse artista)
    {
        ArtistaDaMusica = artista;
        this.artista = artista;
    }

    private void GeneroSelecionado(GeneroResponse genero)
    {
        if (GenerosSelecionados is not null)
        {
            if (!GenerosSelecionados.Contains(genero))
            {
                GenerosSelecionados.Add(genero);
                this.genero = genero;
            }
        }
    }

    private async Task Edit()
    {
        MusicaEdit = new MusicaRequestEdit(Musica!.Id, nome!, artista!.Id, anoLancamento!);
        await musicaAPI.EditMusicaAsync(MusicaEdit!);
        navigationManager.NavigateTo("/MusicasPorArtista");
    }

    public async Task Deletar()
    {
        await musicaAPI.DeleteMusicaAsync(Musica!.Id);
        navigationManager.NavigateTo("/MusicasPorArtista");

    }

    private void Voltar()
    {
        navigationManager.NavigateTo("/MusicasPorArtista");
    }
}